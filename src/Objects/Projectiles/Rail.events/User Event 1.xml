<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="OTHER" id="11">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">if(shot)
    break;

spawn_x = x;
spawn_y = y;
spawn_h = hspeed;
spawn_v = vspeed;

t_x = x;
t_y = y;
step_limit = 300;

// the tracing algorithm is duplicated in the drawing function and in Minegun event 7
// we want to find the first obstacle or hittable that the arc hits
// then damage it and cause an explosion at that point
for (i = 0; i &lt; step_limit; i += 1)
{
    vspeed += gravity;
    n_x = t_x + hspeed;
    n_y = t_y + vspeed;
    
    do // try to collide with different things, using the first found one
    {
        // find out if this segment collides with something; if so return the collision
        inst = collision_line(t_x, t_y, n_x, n_y, Obstacle, true, true);
        if(inst != noone)
            break;
        inst = collision_line(t_x, t_y, n_x, n_y, Character, true, true);
        if(inst != noone)
            if (inst.team != owner.team) // we don't want to collide with friendlies
                break;
        inst = collision_line(t_x, t_y, n_x, n_y, Sentry, true, true);
        if(inst != noone)
            break;
    }
    until (true) // only purpose of the block is to break out of it on the first collision; fall through otherwise
    
    if(inst != noone) // if we hit something, break the loop
        break;
    else              // otherwise we want to move it forward (obviously)
    {
        t_x = n_x;
        t_y = n_y;
    }
}
stepped = i;

if (inst != noone)
{
    // Deal damage to whatever entity our above raytracer landed on.
    if (inst.object_index == Character or inst.object_index == Sentry)
        dealDamage(hitDamage, ownerPlayer, inst, 0, 0, 0);
    
    // Now we want to fix the final position of the arc to be snug against whatever it hit,
    // instead of the little inside that it might be.
    // To do this we're gonna do a binary search between the final two vertices on the arc,
    // and then set our final coordinate to the "snug" position between it and the second-to-last.
    // The t_ coord vars were the "previous" ones, and the n_ ones are the "new" ones.
    // The last iteration of the raytrace above gave up the final two in the arc in order.
    
    // let's copy t_ and n_ now, because we're about to do a lot of statechanging on whatever vars we use for this
    p_x = t_x;
    p_y = t_y;
    s_x = n_x;
    s_y = n_y;
    
    // we're going to find within a pixel of precision, whether we need it or not
    while(point_distance(p_x, p_y, s_x, s_y) &gt; 1)
    {
        // set midpoint coords based on current segment ends
        x_mid = (p_x + s_x)/2;
        y_mid = (p_y + s_y)/2;
        
        // we test whether the first half of the line has any collisions
        collided = collision_line(p_x, p_y, x_mid, y_mid, inst,  true, true)
        //else if (collision_line(p_x, p_y, x_mid, y_mid, Character, true, true))
        //    collided = true;
        //else if (collision_line(p_x, p_y, x_mid, y_mid, Sentry,    true, true))
        //    collided = true;
        
        if(!collided) // if it has a collision, then we want to deal with the first half of our segment next
        {
            p_x = x_mid;
            p_y = y_mid;
        }
        else         // otherwise we'll want to deal with the second half of our current segment
        {
            s_x = x_mid;
            s_y = y_mid;
        }
    }
    
    // now we want to set our final coord in the raytrace to what our "snugger" found
    t_x = (p_x + s_x)/2;
    t_y = (p_y + s_y)/2;
}

shot = 1;
event_user(2);

x = spawn_x;
y = spawn_y;
hspeed = spawn_h;
vspeed = spawn_v;
</argument>
      </arguments>
    </action>
  </actions>
</event>
