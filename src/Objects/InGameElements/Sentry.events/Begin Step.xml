<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="1">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">if(global.isHost
   and (ownerPlayer.class != CLASS_ENGINEER
        or team != ownerPlayer.team
        or collision_circle(x, y+10, 25, Sentry, false, true) &gt;= 0))
{
    sendEventDestruction(ownerPlayer, -1, -1, 0);
    doEventDestruction(ownerPlayer, -1, -1, 0);
    exit;
}

if (!built and vspeed == 0)
{
    if (hp &lt; maxHp)
        hp += 1 * global.tickfactor;
    else
        built = true;
    
    image_index = floor(hp/maxHp*10);
    if !landed
    {
        landed = true;
        playsound(x,y,SentryFloorSnd);
        playsound(x,y,SentryBuildSnd);
    }  
}
if (built and currentWeapon == -1)
{
    image_index = 11;
    image_speed = 0;
    hp = maxHp;
    currentWeapon = instance_create(x, y, weapons[0]);
    currentWeapon.ownerPlayer = ownerPlayer;
    currentWeapon.team = team;
    currentWeapon.startDirection = startDirection;
    with(currentWeapon)
        event_user(0);
}
if (humiliated and built and currentWeapon != -1)
    event_user(1);

if(place_free(x,y+1))
    vspeed += 0.6 * global.tickfactor;

if(vspeed &gt; 10)
    vspeed = 10;

if(abs(oldVspeed) != 0 and vspeed == 0 and global.isHost)
{
    write_ubyte(global.eventBuffer, SENTRY_POSITION);
    write_ubyte(global.eventBuffer, ds_list_find_index(global.players, ownerPlayer));
    write_ushort(global.eventBuffer, round(x*10));
    write_ushort(global.eventBuffer, round(y*10));
}

oldVspeed = vspeed;
</argument>
      </arguments>
    </action>
  </actions>
</event>
