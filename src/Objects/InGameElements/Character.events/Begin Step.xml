<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="1">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">// Apply afterburn
if(global.run_absticks)
{
    if (burnDuration &gt; 0)
    {
        burnDuration -= durationDecay;
        hp -= burnIntensity;
        timeUnscathed = 0;
        if (lastDamageDealer != burnedBy &amp;&amp; lastDamageDealer != player)
        {
            secondToLastDamageDealer = lastDamageDealer;
            alarm[4] = alarm[3];
        }
        alarm[3] = ASSIST_TIME;
        lastDamageDealer = burnedBy;
        lastDamageSource = afterburnSource;
    }
    if (alarm[0] == -1 and burnIntensity &gt; 0)
        burnIntensity -= intensityDecay * global.tickfactor;
    if (burnDuration &lt;= 0 or burnIntensity &lt;= 0)
    {
        burnDuration = 0;
        burnIntensity = 0;
        burnedBy = -1;
        afterburnSource = -1;
    }
}

// Handle input
if(!taunting and !omnomnomnom)
{
    if(!player.humiliated)
    {
        if ((keyState | pressedKeys) &amp; $10)
            with(currentWeapon)
                event_user(1);
        if ((lastKeyState &amp; $10) and not (keyState &amp; $10))
            with(currentWeapon)
                event_user(5);
        if(pressedKeys &amp; $01)
        {
            if (!invisible and cloakAlpha == 1)
                taunting = true;
            if (team == TEAM_RED)
            {
                tauntindex = 0;
                tauntend = tauntlength-1 * global.tickfactor;
            }
            else if (team == TEAM_BLUE)
            {
                tauntindex=tauntlength;
                tauntend=tauntlength*2-1 * global.tickfactor;
            }
            image_speed=tauntspeed;
        } 
    }
    
    if(pressedKeys &amp; $80)
    {
        if(!place_free(x,y+1) and place_free(x,y))
        {
            if(not stabbing)
            {
                playsound(x,y,JumpSnd);
                vspeed = min(vspeed-jumpStrength, -jumpStrength);
            }
        }
        else if(canDoublejump and !doublejumpUsed and vspeed &gt; -jumpStrength)
        {
            vspeed = -jumpStrength;
            playsound(x,y,JumpSnd);
            doublejumpUsed = 1;
            moveStatus = 0;
        }
    }
       
}

// Right click
if (!player.humiliated and ((keyState | pressedKeys) &amp; $08)
    and (!taunting or player.class == CLASS_DEMOMAN) and !omnomnomnom)
{
    with(currentWeapon)
        event_user(2);
}

// Cloak
if (!player.humiliated and (pressedKeys &amp; $08)
    and canCloak and ((cloakAlpha &lt;= 0.5 and cloak) || (cloakAlpha == 1 and !cloak))
    and !intel  and !taunting and !(keyState &amp; $10))
{
    if(currentWeapon.readyToStab)
    {
        if (cloak)
        { // stop spies immediately picking up intel immediate;y after uncloaking
            canGrabIntel = false;
            alarm[1] = 30 * global.ticks_per_abs;
        }
        cloak = !cloak;
    }
}

switch(moveStatus) // moveStatus is reset in collision with obstacles (including doors if they reject you)
{
case 1: //If I am rocketing/mining myself
    controlFactor = 0.65;
    frictionFactor = 1;
    break;
case 2: //If I am rocketing/mining an enemy
    controlFactor = 0.45;
    frictionFactor = 1.05;
    break;
case 3: //Airblast
    controlFactor = 0.35;
    frictionFactor = 1.05;
    break;
case 4: //If I am rocketing/mining a teamate
    controlFactor = baseControl;
    frictionFactor = 1;
    break;
default:
    if(!intel)
        controlFactor = baseControl;
    else
        controlFactor = baseControl*0.9;
    frictionFactor = baseFriction;
}

if(moveStatus == 1 or moveStatus == 2 or moveStatus == 4)
{
    if !variable_local_exists("jumpFlameParticleType")
    {
        jumpFlameParticleType = part_type_create();
        part_type_sprite(jumpFlameParticleType,FlameS,true,false,true);
        part_type_alpha2(jumpFlameParticleType,1,0.3);
        part_type_life(jumpFlameParticleType,2,5);
        part_type_scale(jumpFlameParticleType,0.7,-0.65);
    }
    vspeed -= 0.06 * global.tickfactor;
    
    if !variable_global_exists("jumpFlameParticleSystem")
    {
        global.jumpFlameParticleSystem = part_system_create();
        part_system_depth(global.jumpFlameParticleSystem, 10);
    }
    
    if(global.particles == PARTICLES_NORMAL)
    {
        if(random(1) &gt; (controlFactor+frictionFactor)/2)
        {
            effect_create_below(ef_smoke,x-hspeed*1.2,y-vspeed*1.2+20,0,c_gray);
        }
    }
    if(global.particles == PARTICLES_NORMAL or global.particles == PARTICLES_ALTERNATIVE)
    {
        if(random(7) &lt; 5)
        {
            part_particles_create(global.jumpFlameParticleSystem,x,y+19,jumpFlameParticleType,1);
        }
    }
}

// need this for a while and soon
_maxspeed = abs(baseControl / (baseFriction - 1));

// actually handle acceleration

// get desired direction (right or left, 1 or -1)
if(!taunting and !omnomnomnom)
    _dir = ((keyState|pressedKeys) &amp; $20 != 0) - ((keyState|pressedKeys) &amp; $40 != 0);
else 
    _dir = 0;

// actually move
if(_dir*hspeed &lt; _maxspeed and _dir != 0)
{
    hspeed += _dir*runPower*controlFactor * global.tickfactor;
    hspeed = min(max(hspeed, -_maxspeed), _maxspeed);
}

_power = 1;
_factor = 1;
if(_dir != 0) // controlling character, use friction effects
{
    // double the friction effect if on ground and changing directions
    if (place_meeting(x, y+1, Obstacle) and _dir != sign(hspeed))
        _power = 2;
    // disable the friction if at very low speed
    else if (abs(hspeed) &lt;= 0.2*_maxspeed)
        _power = 0;
}
hspeed /= power(scalemult(frictionFactor), _power);

if(pressedKeys &amp; $04)
{
    setChatBubble(player, 45);
}

pressedKeys = 0;
releasedKeys = 0;

// flame bubble
if (burnDuration &gt; 0 and player.class != CLASS_PYRO and random(80) &lt;= 1)
{
    setChatBubble(player, 49);
}

if(abs(hspeed) &lt; 0.195 and _dir == 0)
{
    hspeed = 0;
    animationImage = 0;
}    
    
if(place_free(x,y+1))
{
    vspeed += 0.6 * global.tickfactor;
    if(vspeed &gt; 10)
        vspeed = 10;
    
    animationImage = 1;
}
else
{
    if(place_free(x,y))
        doublejumpUsed = 0;
}

if (intel)
{ 
    if (random(1) &gt; 0.90 and speed &gt; 2)
    {
        var sheet;
        sheet = instance_create(x, y-11+random(9), LooseSheet);
        sheet.hspeed = hspeed;
    }
    if (cloak)
    {
        cloak = false;
        cloakAplha = 1;
    }
}
 
if (player.humiliated)
{
    if (!place_free(x, y+1) and hspeed == 0)
        animationImage = 0;
    else if place_free(x, y+1)
        animationImage = 2;
    if (!place_free(x, y+1) and hspeed != 0)
        animationImage = 1+((animationImage-1+abs(hspeed * global.tickfactor)/20) mod CHARACTER_ANIMATION_LEN);
}
else
    animationImage = (animationImage+abs(hspeed * global.tickfactor)/20) mod CHARACTER_ANIMATION_LEN;


// drop intel if ubered or round is over
if (intel and (ubered or global.mapchanging))
{
    event_user(5);
}

if(global.run_absticks)
{
    //gotta regenerate some nuts
    if nutsNBolts &lt; 100
        nutsNBolts += 0.1 * global.tickfactor;
    else if nutsNBolts &gt; 100
        nutsNBolts = 100;
}
//ubered max out ammo and extinguish flames
if (ubered)
{
    if (burnIntensity &gt; 0 || burnDuration &gt; 0)
    {
        burnIntensity = 0;
        burnDuration = 0;
        burnedBy = -1;
    }
    if instance_exists(currentWeapon)
    {
        with(currentWeapon)
        {
            if(variable_local_exists("maxAmmo"))
                ammoCount = maxAmmo;
            
            alarm[5] = -1;
        }
    }
}

//give max ammo for players on the winning team
var arenaRoundEnd;
arenaRoundEnd = true;
if instance_exists(ArenaHUD)
{ 
    if(ArenaHUD.endCount != 0) 
        arenaRoundEnd = true;
    else
        arenaRoundEnd = false;
}

if (arenaRoundEnd and global.mapchanging and !player.humiliated)
{
    if instance_exists(currentWeapon)
    {
        with(currentWeapon)
        {
            if(variable_local_exists("maxAmmo"))
                ammoCount = maxAmmo;
            
            alarm[5] = -1;
        }
    }
}

//drop cloak and unscope if on losing team or stalemate
if (player.humiliated)
{
    if (zoomed)
        toggleZoom(id);
    if (!stabbing)
        cloak = false;
}

// Determine if the character is capturing a CP, and which
var zone;
zone = collision_point(x, y, CaptureZone, 0, 0);

if(zone&gt;=0 and !cloak)
{
    cappingPoint = zone.cp;
}
else
{
    cappingPoint = noone;
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
